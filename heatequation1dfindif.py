# -*- coding: utf-8 -*-
"""heatEquation1DfinDif.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dUPiO07rUNfnfLM_OhdhaKt3l7VA22Zr

#Este cuaderno esta relacionado con la solución de Ecuaciones Diferenciales Parciales. Inicialmente vamos a resolver la Ecuación de Calor 1D
"""

import numpy as np

# solución analítica
alpha=1
a=0
b=1
nx=101
X = np.linspace(a,b,nx)
L=b-a

def u(x,t):
 return 6*np.sin(np.pi*x/L)*np.exp(-(1.0/alpha)*(np.pi/L)**2*t)

def solu_eq_calor(alpha,a,b,t0,nt,nx,dt,f):
  # a: edge on the left
  # b: edge on the right
  # nt: number of time samples
  # t0: first time sample
  # nx: number of spatial samples
  # dt: time sampling rate
  # f: initial conditions. We assume 0 boundary conditions.
  L=b-a
  dx=L/(nx-1)
  gamma=alpha*dt/dx**2
  stab_cond=dx**2/(2*alpha)

  # chequeo por estabilidad
  if dt >= stab_cond:
    print("error: la condición de estabilidad fue violada")
    print(" dt=%5.2f" %(dt))
    print(" debe ser menor que dx**2/(2*alpha)=%10.8f" %(stab_cond))
    print(" gamma debe ser menor que 1/2 pero tenemos"
    " que gamma=%10.9f" %(gamma))
    return

  tmax=nt*dt
  t=np.arange(t0,tmax,dt)

  #inicialice el vector w
  w=np.zeros((nx,nt))
  X = np.linspace(a,b,w.shape[0])
  print("dimensiones de w", w.shape)

  # condición inicial
  for i in range(nx):
    w[i,0]=f(X[i])

  # condiciones de frontera
  for j in range(nt):
    w[0,j]=0
    w[nx-1,j]=0

  # ciclo sobre tiempos
  for j in range(0,nt-1):
    # ciclo sobre coordenas x
    for i in range(1,nx-1):
      w[i,j+1]=(1-2*gamma)*w[i,j]+ gamma*(w[i+1,j]+ w[i-1,j])
      
  return w

# Parámetros del experimento
#alpha=1
#a=0
#b=1
t0=0
nt=2
#nx=101
dt=0.1
#L=b-a

# definición de la condición inicial
def f(x):
  return 6*np.sin(np.pi*x/L)

solu_eq_calor(alpha,a,b,t0,nt,nx,dt,f)

dt=0.00001
nt=40001
w=solu_eq_calor(alpha,a,b,t0,nt,nx,dt,f)

import matplotlib.pyplot as plt

#grafique las columnas de w
params={'legend.fontsize':5,'legend.handlength':1}
plt.xlabel(r"$x$")
plt.ylabel(r'$calor$')
plt.title(r'Curvas de calor. Solución numérica')
X = np.linspace(a,b,w.shape[0])

for j in range(0,nt,10000):
  t=j*dt
  plt.plot(X,w[:,j], label=str(round(t,1)) + ' seg')
  plt.legend(labelspacing=1, title="tiempo")
  plt.grid(True)
  plt.show()