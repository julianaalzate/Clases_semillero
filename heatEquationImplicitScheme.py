# -*- coding: utf-8 -*-
"""heatEquationImplicitScheme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_c8B5kJcaXxItcRJv8sl-BhNdF3-WxfO

#Semillero de Computación Científica
## Marzo 4 de 2021
## Tema: Método Implícita de las diferencias Finitas aplicada a la Ecuación de Calor
"""

# Vamos a definir los parámetros del problema

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from numpy import linalg

# funcion para encontrar calor h=dx, k=dt
def solu_eq_calor_implicit(alpha,t0,a,b,nt,nx,dt,f):
  # alpha: constante de calor
  # t0: tiempo inicial
  # a: extremo izquierdo
  # b: extremo derecho
  # nt: número de muestras en t
  # nx: número de muestras en x
  # dt: tamaño de muestra en tiempo
  # f: condicion inicial
  L=b-a
  dx=L/(nx-1)
  gamma=alpha*dt/dx**2

  tmax=nt*dt
  t=np.arange(t0,tmax,dt)

  #inicialice el vector w
  w=np.zeros((nx,nt))
  X = np.linspace(a,b,w.shape[0])

  print("dimensiones de w", w.shape)

  # condiciones de frontera (Dirichlet homogéneas)
  for j in range(nt):
    w[0,j]=0
    w[nx-1,j]=0

  # vector de la derecha y solución interna
  rhs = np.zeros(nx-1)

  # elaboración de matriz A
  # Matriz A inicialización y lleno
  A= np.zeros([nx-1,nx-1])

  # condición inicial
  for i in range(nx):
    w[i,0]=f(X[i])

  # llenado de la matrz A
  for i in range(0,nx-1,1):
    A[i][i] = 1.0 + 2. * gamma
    if i> 0 : A[i][i-1] = - gamma
    if i<nx-2: A[i][i+1] = - gamma

  print("gamma=",gamma)
  # for i in range(nx-1):
  # print(", A[%d,0]=%f6.1"%(i, A[i,0]))

  # ciclo sobre tiempos
  for j in range(0,nt-1):
    # vector del lado derecho
    for i in range(nx-1):
      rhs[i]=w[i+1,j]
    rhs[0] += gamma*w[0,j]
    rhs[nx-2] += gamma*w[nx-1,j]

    # resuelva Aw_j+1=w_j
    x = linalg.solve(A, rhs)

    # rotación
    for i in range(nx-2):
      w[i+1, j + 1] = x[i]

  return w

"""Prueba del algoritmo

"""

alpha=1
a=0
b=1
nt=40001
nx=101
dt=0.00001
t0=0
x0=0

L=b-a
# definición de la condición inicial
def f(x):
  return 6*np.sin(np.pi*x/L)
  
w=solu_eq_calor_implicit(alpha,t0,a,b,nt,nx,dt,f)

"""Grafica de la Solución"""

plt.xlabel(r"$x$")
plt.ylabel(r'$calor$')
plt.title(r'Curvas de calor. Solución numérica')

X = np.linspace(a,b,w.shape[0])
for j in range(0,nt,10000):
  t=j*dt
  plt.plot(X,w[:,j], label=str(round(t,1)) + ' seg')
  plt.legend(labelspacing=1, title="tiempo")
plt.grid(True)
plt.show()